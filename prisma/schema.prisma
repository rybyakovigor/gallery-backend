// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  superadmin
  moderator
}

model User {
  id         String   @id @default(dbgenerated("fn_uuid_time_ordered()"))
  full_name  String   @db.VarChar(60)
  email      String   @db.VarChar(60)
  blocked    Boolean  @default(false)
  role       RoleEnum
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("users")
}

model Work {
  id          String   @id @default(dbgenerated("fn_uuid_time_ordered()"))
  title       String   @db.VarChar(120)
  description String   @db.VarChar()
  width       Int
  height      Int
  price       Int
  is_sold     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  framing_type FramingType[]
  images       WorkImage[]
  materials    MaterialsOnWorks[]

  @@map("works")
}

model WorkImage {
  id         String   @id @default(dbgenerated("fn_uuid_time_ordered()"))
  title      String   @db.VarChar()
  alt        String   @db.VarChar(120)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  file    File?
  work    Work   @relation(fields: [work_id], references: [id])
  work_id String

  @@map("work_images")
}

model Material {
  id         String             @id @default(dbgenerated("fn_uuid_time_ordered()"))
  title      String             @db.VarChar(60) @unique
  created_at DateTime           @default(now())
  updated_at DateTime           @default(now()) @updatedAt
  works      MaterialsOnWorks[]

  @@map("work_materials")
}

model MaterialsOnWorks {
  work       Work     @relation(fields: [workId], references: [id])
  workId     String
  material   Material @relation(fields: [materialId], references: [id])
  materialId String

  @@id([workId, materialId])
  @@map("materials_on_works")
}

model File {
  id         String   @id @default(dbgenerated("fn_uuid_time_ordered()"))
  title      String   @db.VarChar()
  key        String   @db.VarChar()
  path       String   @db.VarChar()
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  work_image    WorkImage? @relation(fields: [work_image_id], references: [id])
  work_image_id String?    @unique

  @@map("files")
}

model FramingType {
  id         String   @id @default(dbgenerated("fn_uuid_time_ordered()"))
  title      String   @db.VarChar(60)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  work    Work   @relation(fields: [work_id], references: [id])
  work_id String

  @@map("work_framing_types")
}
